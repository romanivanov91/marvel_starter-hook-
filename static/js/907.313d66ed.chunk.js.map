{"version":3,"file":"static/js/907.313d66ed.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/comicsList/ComicsList.js","components/appBanner/AppBanner.js","components/pages/ComicsPage.js","services/MarvelService.js","hooks/http.hook.js"],"sourcesContent":["import imgError from \"./error.gif\"\r\n\r\nconst ErrorMessage = () => {\r\n    return(\r\n        <img style={{ display: 'block', width: \"250px\", height: \"250px\",objectFit: 'contain', margin: \"0 auto\"}} src={imgError} alt=\"Error\" />\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import './comicsList.scss';\nimport useMarvelService from '../../services/MarvelService';\nimport React, { useState, useEffect } from 'react';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group'\nimport { Link } from 'react-router-dom';\n\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nconst ComicsList = () => {\n\n    //Задаем начальные состояния переменных\n    const[comicsList, setComicsList] = useState([]);//Изначально данные комикса пусты\n    const[newItemLoading, setNewItemLoading] = useState(false);//Новые комиксы не подгружаются\n    const[offset, setOffset] = useState(0);//начальный отступ\n    const[comicsEnded, setComicsEnded] = useState(false);//false - комиксы для подгрузки есть, true - комиксы для подгрузки отсутствуют (для блокировки кнопки подгрузки)\n\n    //Используем сервис MarvelService, чтобы получить данные с сервера\n    const{getAllComics, loading, error} = useMarvelService();\n\n    //Первоначальный запрос на сервер для формирования контента\n    useEffect(() => {\n        onRequest(offset, true);//Первый запрос с базовым offset и вторым параметром передаем true так как это первичная загрузка чтобы вывести спиннер, который задан в MarvelService\n    },[])\n\n    //Метод запроса на сервер с заданным offset\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);//новые персонажи подгружаются или нет. Метод на время подгрузки новых персонажей\n        getAllComics(offset)\n       .then(onComicsListLoaded);\n    }\n\n    //Метод обновление данных state для универсальности использования\n    const onComicsListLoaded = (newComicsList) => {\n        let ended = false;\n        if (newComicsList.length < 8) {\n            ended = true;\n        }\n        setComicsList(comicsList => [...comicsList, ...newComicsList]); //добавляем к существующему comicslist новые данные);\n        setNewItemLoading(false);//новые персонажи не подгружаются\n        setOffset(offset => offset + 8);//изменяем начальный отступ персонажей на 9 позиций\n        setComicsEnded(ended);//comicsEnded задаем в зависимости есть ли еще комиксы для подгрузки для блокировки кнопки. false - комиксы для подгрузки есть, true - комиксы для подгрузки отсутствуют\n    }\n\n    const renderItems = (arr) => {\n        const items =arr.map((item, i) => {\n            console.log(item);\n            return (\n                <CSSTransition key={i} timeout={1000} classNames=\"comics__item\">\n                    <li className=\"comics__item\">\n                        <Link to={`/comics/${item.id}`}>\n                            <img src={item.thumbnail} alt={item.title} className=\"comics__item-img\"/>\n                            <div className=\"comics__item-name\">{item.title}</div>\n                            <div className=\"comics__item-price\">{item.prices}</div>\n                        </Link>\n                    </li>\n                    </CSSTransition>\n            )\n        })\n        return (\n            <ul className=\"comics__grid\">\n                <TransitionGroup component={null}>\n                {items}\n                </TransitionGroup>\n            </ul>\n        )\n    }\n\n    const spisok = renderItems(comicsList);\n\n    const errorMessage = error ? <ErrorMessage/> : null; //если error из state - true, то выводим сообщение или картинку об ошибке, в противном случае ничего не выводим\n    const spinner = loading && !newItemLoading ? <Spinner/> : null;//если loading из state - true, то выводим спиннер, в противном случае ничего не выводим\n\n    return (\n        <div className=\"comics__list\">\n            {errorMessage}\n            {spinner}\n            {spisok}\n            <button \n                className=\"button button__main button__long\"\n                disabled={newItemLoading}//блокируем кнопку если загружаются новые комиксы\n                style={{'display' : comicsEnded ? 'none' : 'block'}}//Убираем кнопку когда комиксы закончились\n                onClick={() => onRequest(offset)}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nexport default ComicsList;","import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;","import ComicsList from \"../comicsList/ComicsList\";\r\nimport AppBanner from \"../appBanner/AppBanner\"\r\n\r\nconst ComicsPage = () => {\r\n    return (\r\n        <>\r\n            <AppBanner/>\r\n            <ComicsList/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ComicsPage;","import { useHttp } from '../hooks/http.hook'\r\n\r\nconst useMarvelService = () => {\r\n\r\n    const {loading, request, error, clearError} = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=d04fa5daa548e140a4c68e1b1b1a47f2';\r\n    const _baseOffset = 0;\r\n\r\n    //Метод по получение данных нескольких персонажей (в данном случае 9 limit=9 и отступом 250 персонажей от начала offset=250).Метод должен дождаться данных с севрера поэтому используем async и await\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);//Перебираем каждые элемент массива и преобразуем в удобный нам формат при помощи метода _transformeCharacter\r\n    }\r\n\r\n    // Вариант модификации готового метода для поиска по имени. \r\n    // Вызывать его можно вот так: getAllCharacters(null, name)\r\n\r\n    // const getAllCharacters = async (offset = _baseOffset, name = '') => {\r\n    //     const res = await request(`${_apiBase}characters?limit=9&offset=${offset}${name ? `&name=${name}` : '' }&${_apiKey}`);\r\n    //     return res.data.results.map(_transformCharacter);\r\n    // }\r\n\r\n    // Или можно создать отдельный метод для поиска по имени\r\n\r\n    const getCharacterByName = async (name) => {\r\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    //Метод по получению одного конкретного персонажа. Метод должен дождаться данных с севрера поэтому используем async и await\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);//res.data.results[0] - объект персонажа \r\n    }\r\n\r\n    //Метод получения данных нескольких комиксов\r\n    const getAllComics = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(__transformeComics);//Перебираем каждый элемент массива и преобразуем в удобный нам формат при помощи метода _transformeComics\r\n    }\r\n\r\n    //Метод получения данных одного комикса\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n        return __transformeComics(res.data.results[0])\r\n    }\r\n\r\n\r\n\r\n\r\n    //Метод трансформирующий данные по персонажу в удобный нам формат\r\n    const _transformCharacter = (char) => {\r\n        if (char.description === '') {\r\n            char.description = 'Описание отсутствует'\r\n        } else if (char.description.length > 210) {\r\n            char.description = char.description.substr(0, 210) + '...'\r\n        }\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description,\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    } \r\n\r\n    //Метод трансформирующий данные по комиксам в удобный формат\r\n    const __transformeComics = (comics) => {\r\n        return {\r\n            id: comics.id,\r\n            title: comics.title,\r\n            description: comics.description || 'Описание отсутствует',\r\n            pageCount: comics.pageCount ? `${comics.pageCount} pages` : 'Кол-во стр. не известно',\r\n            language: comics.textObjects.language,\r\n            prices: comics.prices[0].price ? `${comics.prices[0].price}$` : 'Цена неизвестна',\r\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n        }\r\n    } \r\n\r\n    return {loading, error, getAllCharacters, getCharacter, clearError, getAllComics, getComic, getCharacterByName}\r\n}\r\n\r\nexport default useMarvelService;","import { useState, useCallback } from 'react'\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false);//Изначально статус загрузки false\r\n    const [error, setError] = useState(null);\r\n\r\n    const request = useCallback(async(url, method = 'GET', body = null, headers = {'Content-Type': 'aplication/json'}) => {\r\n\r\n        setLoading(true);//Как запустили функцию request, значит идет загрузка и устанавливаем loading в true\r\n\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n\r\n            if(!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            setLoading(false);//после того как данные загрузились устанавливаем loading обратно в false\r\n\r\n            return data;\r\n            \r\n        } catch (e) {\r\n            setLoading(false);//если произошла ошибка, то присваимваем loading в false\r\n            setError(e.message);//если произошла ошибка, то присваиваем error сообщение ошибки\r\n            throw(e);\r\n        }\r\n\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => setError(null), []);\r\n\r\n    return {loading, request, error, clearError}\r\n}"],"names":["style","display","width","height","objectFit","margin","src","imgError","alt","useState","comicsList","setComicsList","newItemLoading","setNewItemLoading","offset","setOffset","comicsEnded","setComicsEnded","useMarvelService","getAllComics","loading","error","useEffect","onRequest","initial","then","onComicsListLoaded","newComicsList","ended","length","spisok","arr","items","map","item","i","console","log","CSSTransition","timeout","classNames","className","to","id","thumbnail","title","prices","TransitionGroup","component","renderItems","errorMessage","ErrorMessage","spinner","Spinner","disabled","onClick","avengers","avengersLogo","setLoading","setError","request","useCallback","url","method","body","headers","fetch","response","ok","Error","status","json","data","message","clearError","useHttp","_apiBase","_apiKey","getAllCharacters","res","results","_transformCharacter","getCharacterByName","name","getCharacter","__transformeComics","getComic","char","description","substr","path","extension","homepage","urls","wiki","comics","pageCount","language","textObjects","price"],"sourceRoot":""}