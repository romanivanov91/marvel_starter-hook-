{"version":3,"file":"static/js/140.d62f3af8.chunk.js","mappings":"gNA6CMA,EAAO,SAAC,GAAa,IAAZC,EAAW,EAAXA,MAEJC,EAA8DD,EAA9DC,MAAOC,EAAuDF,EAAvDE,YAAaC,EAA0CH,EAA1CG,UAAWC,EAA+BJ,EAA/BI,SAAUC,EAAqBL,EAArBK,OAAQC,EAAaN,EAAbM,UAExD,OACI,iBAAKC,UAAU,eAAf,WACI,gBAAKC,IAAKF,EAAWG,IAAKR,EAAOM,UAAU,uBAC3C,iBAAKA,UAAU,qBAAf,WACI,eAAIA,UAAU,qBAAd,SAAoCN,KACpC,cAAGM,UAAU,sBAAb,SAAoCL,KACpC,cAAGK,UAAU,sBAAb,SAAoCJ,KACpC,eAAGI,UAAU,sBAAb,uBAA8CH,MAC9C,gBAAKG,UAAU,sBAAf,SAAsCF,QAE1C,SAAC,KAAD,CAAMK,GAAG,UAAUH,UAAU,qBAA7B,2BAGX,EAED,UAvDwB,WAEpB,IAAOI,GAAWC,EAAAA,EAAAA,MAAXD,QACP,GAA0BE,EAAAA,EAAAA,UAAS,MAAnC,eAAOb,EAAP,KAAcc,EAAd,KAGC,GAA+CC,EAAAA,EAAAA,KAAxCC,EAAP,EAAOA,QAASC,EAAhB,EAAgBA,MAAOC,EAAvB,EAAuBA,SAAUC,EAAjC,EAAiCA,YAEjCC,EAAAA,EAAAA,YAAU,WACPC,GACH,GAAC,CAACV,IAEH,IAAMU,EAAc,WAChBF,IACAD,EAASP,GACRW,KAAKC,EACT,EAGKA,EAAgB,SAACvB,GACnBc,EAASd,EACZ,EAEKwB,EAAeP,GAAQ,SAAC,IAAD,IAAkB,KACzCQ,EAAUT,GAAU,SAAC,IAAD,IAAa,KACjCU,EAAYV,GAAWC,IAAUjB,EAAiC,MAAxB,SAACD,EAAD,CAAMC,MAAOA,IAE7D,OACI,gCACKwB,EACAC,EACAC,IAGZ,C","sources":["components/pages/SingleComicPage.js"],"sourcesContent":["import { useParams, Link } from 'react-router-dom';\r\nimport { useState, useEffect } from 'react';\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport Spinner from '../spinner/Spinner';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\nimport Skeleton from '../skeleton/Skeleton';\r\n\r\nimport './singleComicPage.scss';\r\n\r\nconst SingleComicPage = () => {\r\n\r\n    const {comicId} = useParams();\r\n    const [comic, setComic] = useState(null);\r\n\r\n     //Используем сервис MarvelService, чтобы получить данные с сервера\r\n     const {loading, error, getComic, clearError} = useMarvelService();\r\n\r\n     useEffect(() => {\r\n        updateComic();\r\n    },[comicId])\r\n\r\n    const updateComic = () => {\r\n        clearError();\r\n        getComic(comicId)\r\n        .then(onComicLoaded);\r\n    }\r\n\r\n    //Метод обновление данных state для универсальности использования\r\n    const onComicLoaded = (comic) => {\r\n        setComic(comic);\r\n    }\r\n\r\n    const errorMessage = error ? <ErrorMessage/> : null;//если error из state - true, то выводим сообщение или картинку об ошибке, в противном случае ничего не выводим\r\n    const spinner = loading ? <Spinner/> : null;//если loading из state - true, то выводим спиннер, в противном случае ничего не выводим\r\n    const content = !(loading || error || !comic) ? <View comic={comic}/> : null; //если loading из state - false и error из state - false и есть char из state, то есть все загрузилось и нет никаких ошибок, то выводим контент\r\n\r\n    return (\r\n        <>\r\n            {errorMessage}\r\n            {spinner}\r\n            {content}\r\n        </>\r\n    )\r\n}\r\n\r\nconst View = ({comic}) => {\r\n\r\n    const {title, description, pageCount, language, prices, thumbnail} = comic\r\n\r\n    return (\r\n        <div className=\"single-comic\">\r\n            <img src={thumbnail} alt={title} className=\"single-comic__img\"/>\r\n            <div className=\"single-comic__info\">\r\n                <h2 className=\"single-comic__name\">{title}</h2>\r\n                <p className=\"single-comic__descr\">{description}</p>\r\n                <p className=\"single-comic__descr\">{pageCount}</p>\r\n                <p className=\"single-comic__descr\">Language: {language}</p>\r\n                <div className=\"single-comic__price\">{prices}</div>\r\n            </div>\r\n            <Link to=\"/comics\" className=\"single-comic__back\">Back to all</Link>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SingleComicPage;"],"names":["View","comic","title","description","pageCount","language","prices","thumbnail","className","src","alt","to","comicId","useParams","useState","setComic","useMarvelService","loading","error","getComic","clearError","useEffect","updateComic","then","onComicLoaded","errorMessage","spinner","content"],"sourceRoot":""}