{"version":3,"file":"static/js/982.33d066ac.chunk.js","mappings":"gNA8CMA,EAAO,SAAC,GAAY,IAAXC,EAAU,EAAVA,KAEJC,EAAgCD,EAAhCC,KAAMC,EAA0BF,EAA1BE,YAAaC,EAAaH,EAAbG,UAE1B,OACI,iBAAKC,UAAU,eAAf,WACI,gBAAKC,IAAKF,EAAWG,IAAKL,EAAMG,UAAU,uBAC1C,iBAAKA,UAAU,qBAAf,WACI,eAAIA,UAAU,qBAAd,SAAoCH,KACpC,cAAGG,UAAU,sBAAb,SAAoCF,QAExC,SAAC,KAAD,CAAMK,GAAG,IAAIH,UAAU,qBAAvB,2BAGX,EAED,UArDuB,WAEnB,IAAOI,GAAUC,EAAAA,EAAAA,MAAVD,OACP,GAAwBE,EAAAA,EAAAA,UAAS,MAAjC,eAAOV,EAAP,KAAaW,EAAb,KAGC,GAAmDC,EAAAA,EAAAA,KAA5CC,EAAP,EAAOA,QAASC,EAAhB,EAAgBA,MAAOC,EAAvB,EAAuBA,aAAcC,EAArC,EAAqCA,YAErCC,EAAAA,EAAAA,YAAU,WACPC,GACH,GAAC,CAACV,IAEH,IAAMU,EAAc,WAChBF,IACAD,EAAaP,GACZW,KAAKC,EACT,EAGKA,EAAe,SAACpB,GAClBW,EAAQX,GACRqB,QAAQC,IAAItB,EACf,EAEKuB,EAAeT,GAAQ,SAAC,IAAD,IAAkB,KACzCU,EAAUX,GAAU,SAAC,IAAD,IAAa,KACjCY,EAAYZ,GAAWC,IAAUd,EAA8B,MAAtB,SAACD,EAAD,CAAMC,KAAMA,IAE3D,OACI,gCACKuB,EACAC,EACAC,IAGZ,C","sources":["components/pages/SingleCharPage.js"],"sourcesContent":["import { useParams, Link } from 'react-router-dom';\r\nimport { useState, useEffect } from 'react';\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport Spinner from '../spinner/Spinner';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\nimport Skeleton from '../skeleton/Skeleton';\r\n\r\nimport './singleComicPage.scss';\r\n\r\nconst SingleCharPage = () => {\r\n\r\n    const {charId} = useParams();\r\n    const [char, setChar] = useState(null);\r\n\r\n     //Используем сервис MarvelService, чтобы получить данные с сервера\r\n     const {loading, error, getCharacter, clearError} = useMarvelService();\r\n\r\n     useEffect(() => {\r\n        updateComic();\r\n    },[charId])\r\n\r\n    const updateComic = () => {\r\n        clearError();\r\n        getCharacter(charId)\r\n        .then(onCharLoaded)\r\n    }\r\n\r\n    //Метод обновление данных state для универсальности использования\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n        console.log(char);\r\n    }\r\n\r\n    const errorMessage = error ? <ErrorMessage/> : null;//если error из state - true, то выводим сообщение или картинку об ошибке, в противном случае ничего не выводим\r\n    const spinner = loading ? <Spinner/> : null;//если loading из state - true, то выводим спиннер, в противном случае ничего не выводим\r\n    const content = !(loading || error || !char) ? <View char={char}/> : null; //если loading из state - false и error из state - false и есть char из state, то есть все загрузилось и нет никаких ошибок, то выводим контент\r\n\r\n    return (\r\n        <>\r\n            {errorMessage}\r\n            {spinner}\r\n            {content}\r\n        </>\r\n    )\r\n}\r\n\r\nconst View = ({char}) => {\r\n\r\n    const {name, description, thumbnail} = char;\r\n\r\n    return (\r\n        <div className=\"single-comic\">\r\n            <img src={thumbnail} alt={name} className=\"single-comic__img\"/>\r\n            <div className=\"single-comic__info\">\r\n                <h2 className=\"single-comic__name\">{name}</h2>\r\n                <p className=\"single-comic__descr\">{description}</p>\r\n            </div>\r\n            <Link to=\"/\" className=\"single-comic__back\">Back to all</Link>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SingleCharPage;"],"names":["View","char","name","description","thumbnail","className","src","alt","to","charId","useParams","useState","setChar","useMarvelService","loading","error","getCharacter","clearError","useEffect","updateComic","then","onCharLoaded","console","log","errorMessage","spinner","content"],"sourceRoot":""}