{"version":3,"file":"static/js/812.3ba60a45.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/randomChar/RandomChar.js","components/charList/CharList.js","components/charInfo/CharInfo.js","components/errorBoundary/ErrorBoundary.js","components/charSearchForm/CharSearchForm.js","components/pages/MainPage.js","components/skeleton/Skeleton.js","services/MarvelService.js","hooks/http.hook.js"],"sourcesContent":["import imgError from \"./error.gif\"\r\n\r\nconst ErrorMessage = () => {\r\n    return(\r\n        <img style={{ display: 'block', width: \"250px\", height: \"250px\",objectFit: 'contain', margin: \"0 auto\"}} src={imgError} alt=\"Error\" />\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import { useState, useEffect } from 'react';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\n//Создаем класс\nconst RandomChar = () =>  {\n\n    //Задаем начальные состояния переменных\n    const [char, setChar] = useState({});//Изначально данные персонажа пусты\n    //Теперь эти переменные приходят из useMarvelService\n    // const [loading, setLoading] = useState(true);//Пока персонаж не загрузился, показываем спиннер. true - не загрузился\n    // const [error, setError] = useState(false);//Сначало ошибка отсутствует. false - нет ошибки, true - произошла ошибка загрузки\n    \n    useEffect(() => {\n        updateChar();\n    },[])\n\n    //Используем сервис MarvelService, чтобы получить данные с сервера\n    const {loading, error, getCharacter, clearError} = useMarvelService();\n\n    //Метод обновление данных state для универсальности исползования\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    //Все закоментированные методы нам теперь не нужны так как они производятся в useMarvelService\n    // const onCharLoading = () => {\n    //     setLoading(true);//пока персонаж грузится, то показываем спиннер\n    // }\n\n    // //Метод записывающий в state error: true для того чтобы отобразить ошибку\n    // const onError = () => {\n    //     setLoading(false);//если персонаж не загрузился, то убираем спиннер\n    //     setError(true);// и показываем текст или изображение ошибки\n    // }\n\n    const updateChar = () => {\n        clearError();\n        const id = Math.floor(Math.random() * (1011400-1011000) + 1011000);\n        getCharacter(id)//приходят удобные данные. см. MarvelService\n        .then(onCharLoaded);//персонаж загрузился\n    }\n\n    const errorMessage = error ? <ErrorMessage/> : null;//если error из state - true, то выводим сообщение или картинку об ошибке, в противном случае ничего не выводим\n    const spinner = loading ? <Spinner/> : null;//если loading из state - true, то выводим спиннер, в противном случае ничего не выводим\n    const content = !(loading || error) ? <View char={char}/> : null; //если loading из state - false и error из state - false, то есть все загрузилось и нет никаких ошибок, то выводим контент\n\n    return (\n        <div className=\"randomchar\">\n            {errorMessage}\n            {spinner}\n            {content}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br/>\n                    Do you want to get to know him better?\n            </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button onClick={updateChar} className=\"button button__main\">\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n            </div>\n        </div>\n    )\n}\n\nconst View = ({char}) => {\n\n    const {name, description, thumbnail, homepage, wiki} = char;\n    let imgStyle = {'objectFit' : 'cover'};//Начальное значение objectFit\n    //Условие при котором objectFit меняется если у свойства персонажа дана ссылка на заглушку\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'contain'};\n    }\n\n    return (\n        <div className=\"randomchar__block\">\n            <img style={imgStyle} src={thumbnail} alt=\"Random character\" className=\"randomchar__img\"/>\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RandomChar;","import useMarvelService from '../../services/MarvelService';\nimport React, { useState, useEffect, useRef } from 'react';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group'\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport PropTypes from 'prop-types'\n\nimport './charList.scss';\n\nconst CharList = (props) => {\n\n    //Задаем начальные состояния переменных\n    const[charList, setCharList] = useState([]);//Изначально данные персонажа пусты\n    const[newItemLoading, setNewItemLoading] = useState(false);//Новые персонажи не подгружаются\n    const[offset, setOffset] = useState(0);//начальный отступ\n    const[charEnded, setCharEnded] = useState(false);//false - персонажи для подгрузки есть, true - персонажи для подгрузки отсутствуют (для блокировки кнопки подгрузки)\n    //Теперь эти переменные приходят из useMarvelService\n    // const[loading, setLoading] = useState(true);//Пока персонаж не загрузился, показываем спиннер. true - не загрузился\n    // const[error, setError] = useState(false);//Сначало ошибка отсутствует. false - нет ошибки, true - произошла ошибка загрузки\n\n    //Используем сервис MarvelService, чтобы получить данные с сервера\n    const {loading, error, getAllCharacters} = useMarvelService();\n\n    //Первоначальный запрос на сервер для формирования контента\n    useEffect(() => {\n        onRequest(offset, true);//Первый запрос с базовым offset и вторым параметром передаем true так как это первиченая загрузка чтобы вывести спиннер, который задан в MarvelService\n    },[])\n\n    //Метод запроса на сервер с заданным offset\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);//новые персонажи подгружаются или нет. Метод на время подгрузки новых персонажей\n        getAllCharacters(offset)\n       .then(onCharListLoaded);\n    }\n\n    //Метод обновление данных state для универсальности использования\n    const onCharListLoaded = (newCharList) => {\n        let ended = false;\n        if (newCharList.length < 9) {\n            ended = true;\n        }\n        setCharList(charList => [...charList, ...newCharList]); //добавляем к существующему charlist новые данные);\n        setNewItemLoading(false);//новые персонажи не подгружаются\n        setOffset(offset => offset + 9);//изменяем начальный отступ персонажей на 9 позиций\n        setCharEnded(ended);\n    }\n\n    const itemRefs = useRef([]);//Массив куда добавляются элементы li в методе renderItems\n\n    //Метод удаляющий класс активности из всех элементов li из метода renderItems и добавляет его же к элементу li на который кликнули\n    const focusOnItem = (id) => {\n        //Ниже коментарий от Ивана Петреченко\n        // Я реализовал вариант чуть сложнее, и с классом и с фокусом\n        // Но в теории можно оставить только фокус, и его в стилях использовать вместо класса\n        // На самом деле, решение с css-классом можно сделать, вынеся персонажа\n        // в отдельный компонент. Но кода будет больше, появится новое состояние\n        // и не факт, что мы выиграем по оптимизации за счет бОльшего кол-ва элементов\n\n        // По возможности, не злоупотребляйте рефами, только в крайних случаях\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n        itemRefs.current[id].classList.add('char__item_selected');\n        itemRefs.current[id].focus();\n    }\n\n    const renderItems = (arr) => {\n        const items= arr.map((item, i) => {\n            let imgStyle = {'objectFit' : 'cover'};//Начальное значение objectFit\n            //Условие при котором objectFit меняется если у свойства персонажа дана ссылка на заглушку\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n            imgStyle = {'objectFit' : 'unset'};\n            }\n            return (\n                <CSSTransition key={item.id} timeout={1000} classNames=\"char__item\">\n                    <li\n                        //Свойство чтобы можно было выбирать элемент нажатием на tab\n                        tabIndex={0}\n                        //ref - вызывает функцию setRef которая добавляет в массив itemRefs данный элемент li\n                        ref={el => itemRefs.current[i]=el}\n                        className=\"char__item\" \n                        onClick={()=>\n                        {props.onCharSelected(item.id);\n                        focusOnItem(i)}}\n                        //onKeyPress - обработчик события для выбора элемента страницы нажатием на tab\n                        onKeyPress={(e) => {\n                            if (e.key === ' ' || e.key === \"Enter\") {\n                                props.onCharSelected(item.id);\n                                focusOnItem(i);\n                            }\n                        }}\n                        >\n                        <img style={imgStyle} src={item.thumbnail} alt={item.name}/>\n                        <div className=\"char__name\">{item.name}</div>\n                    </li>\n                </CSSTransition>\n            )\n        })\n        // А эта конструкция вынесена для центровки спиннера/ошибки\n        return (\n            <ul className=\"char__grid\">\n                <TransitionGroup component={null}>\n                    {items}\n                </TransitionGroup>\n            </ul>\n        )\n    }\n\n    const spisok = renderItems(charList);\n\n    const errorMessage = error ? <ErrorMessage/> : null;//если error из state - true, то выводим сообщение или картинку об ошибке, в противном случае ничего не выводим\n    const spinner = loading && !newItemLoading ? <Spinner/> : null;//если loading из state - true, то выводим спиннер, в противном случае ничего не выводим\n\n    return (\n        <div className=\"char__list\">\n            {spinner}\n            {errorMessage}\n            {spisok}\n            <button \n                className=\"button button__main button__long\"\n                disabled={newItemLoading}\n                style={{'display' : charEnded ? 'none' : 'block'}}\n                onClick={() => onRequest(offset)}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\n//Проверка типов с помощью PropTypes\nCharList.protoTypes = {\n    onCharSelected: PropTypes.func.isRequired\n}\n\n\nexport default CharList;","import { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Skeleton from '../skeleton/Skeleton';\n\nimport './charInfo.scss';\n\nconst CharInfo = (props) => {\n\n    //Задаем начальные состояния переменных\n    const [char, setChar] = useState(null);//Изначально данные персонажа пусты, в данном случае устанавливаем null так как, чтобы отображать скелетон, нам надо в условии skeleton из render в значении char в  false, а просто пустой объект - это true\n\n    //Теперь эти переменные приходят из useMarvelService\n    // const [loading, setLoading] = useState(false);////Пока персонаж не загрузился, показываем скелетон. Загрузка пойдет только по клику пользователя\n    // const [error, setError] = useState(false);//Сначало ошибка отсутствует. false - нет ошибки, true - произошла ошибка загрузки\n\n    useEffect(() => {\n        updateChar();\n    },[props.charId])\n\n    //Используем сервис MarvelService, чтобы получить данные с сервера\n    const {loading, error, getCharacter, clearError} = useMarvelService();\n\n    const updateChar = () => {\n        const {charId} = props;//Получаем id персонажа из App\n        //Если Id персонажа нету то останавливаем метод\n        if (!charId) {\n            return;\n        }\n        clearError();\n        getCharacter(charId)\n        .then(onCharLoaded);\n    }\n\n    \n    //Метод обновление данных state для универсальности использования\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    //Все закоментированные методы нам теперь не нужны так как они производятся в useMarvelService\n    // const onCharLoading = () => {\n    //     setLoading(true);//пока персонаж грузится, то показываем спиннер\n    // }\n\n    // //Метод записывающий в state error: true для того чтобы отобразить ошибку\n    // const onError = () => {\n    //     setLoading(false);//если персонаж не загрузился, то убираем спиннер\n    //     setError(true);// и показываем текст или изображение ошибки\n    // }\n\n    const skeleton = char || loading || error ? null : <Skeleton/>//Если персонаж не загружен, нет загрузки и нету ошибки по показываем скелетон\n    const errorMessage = error ? <ErrorMessage/> : null;//если error из state - true, то выводим сообщение или картинку об ошибке, в противном случае ничего не выводим\n    const spinner = loading ? <Spinner/> : null;//если loading из state - true, то выводим спиннер, в противном случае ничего не выводим\n    const content = !(loading || error || !char) ? <View char={char}/> : null; //если loading из state - false и error из state - false и есть char из state, то есть все загрузилось и нет никаких ошибок, то выводим контент\n    \n    return (\n         <div className=\"char__info\">\n            {skeleton}\n            {errorMessage}\n            {spinner}\n            {content}\n        </div>\n    )\n}\n\n//Выносим в отдельный компонент верстку\nconst View = ({char}) => {\n\n    const {id, name, thumbnail, homepage, wiki, description, comics} = char;\n\n    let imgStyle = {'objectFit' : 'cover'};//Начальное значение objectFit\n    //Условие при котором objectFit меняется если у свойства персонажа дана ссылка на заглушку\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'contain'};\n    }\n\n    return(\n        <>\n            <div className=\"char__basics\">\n                <img style={imgStyle} src={thumbnail} alt={name}/>\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n                </div>\n                <div className=\"char__descr\">\n                    {description}\n                </div>\n                <div className=\"char__comics\">Comics:</div>\n                <ul className=\"char__comics-list\">\n                    {comics.length > 0 ? null : 'Комиксы отсутствуют'}\n                    {\n                        comics.slice(0, 10).map((item, index) => {//slice - обрезает массив до 10 элементов\n                            return (\n                                <li className=\"char__comics-item\" key={index}>\n                                    <a href={`${item.resourceURI}&apikey=d04fa5daa548e140a4c68e1b1b1a47f2`}>{item.name}</a>\n                                </li>\n                            )\n                        })\n                    }\n                </ul>\n        </>\n    )\n}\n\nexport default CharInfo;","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        console.log(error, errorInfo);\r\n        this.setState({\r\n            error: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return <ErrorMessage/>\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import {useState} from 'react';\r\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport {Link} from 'react-router-dom';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nimport './charSearchForm.scss';\r\n\r\nconst CharSearchForm = () => {\r\n\r\n    const [char, setChar] = useState('');\r\n    \r\n     //Используем сервис MarvelService, чтобы получить данные с сервера\r\n     const {loading, error, getCharacterByName, clearError} = useMarvelService();\r\n\r\n      //Метод обновление данных state для универсальности исползования\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n        console.log(char);\r\n    }\r\n\r\n    const updateChar = (name) => {\r\n        clearError();\r\n        getCharacterByName(name)//приходят удобные данные. см. MarvelService\r\n        .then(onCharLoaded);//персонаж загрузился\r\n    }\r\n\r\n    const errorMessage = error ? <div className=\"char__search-critical-error\"><ErrorMessage /></div> : null;\r\n    const results = !char ? null : char.length > 0 ?\r\n                    <div className=\"char__search-wrapper\">\r\n                        <div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\r\n                        <Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\r\n                            <div className=\"inner\">To page</div>\r\n                        </Link>\r\n                    </div> : \r\n                    <div className=\"char__search-error\">\r\n                        The character was not found. Check the name and try again\r\n                    </div>;\r\n \r\n    return (\r\n        <div className=\"char__search-form\">\r\n            <Formik\r\n                initialValues={{\r\n                    charName: ''\r\n                }}\r\n                validationSchema={Yup.object({\r\n                    charName: Yup.string().required('Введите имя персонажа'),\r\n                })}\r\n                onSubmit = { ({charName}) => {\r\n                    updateChar(charName);\r\n                }}\r\n            >\r\n            <Form>\r\n                    <label className=\"char__search-label\" htmlFor=\"charName\">Or find a character by name:</label>\r\n                    <div className=\"char__search-wrapper\">\r\n                        <Field\r\n                            id=\"charName\" \r\n                            name='charName' \r\n                            type='text' \r\n                            placeholder=\"Enter name\"/>\r\n                        <button \r\n                            type='submit' \r\n                            className=\"button button__main\"\r\n                            disabled={loading}>\r\n                            <div className=\"inner\">find</div>\r\n                        </button>\r\n                    </div>\r\n                    <FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" />\r\n                </Form>\r\n            </Formik>\r\n            {results}\r\n            {errorMessage}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CharSearchForm;","import { useState } from \"react\";\r\nimport {Helmet} from \"react-helmet\";\r\n\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport ErrorBoundary  from \"../errorBoundary/ErrorBoundary\";\r\nimport CharSearchForm from '../charSearchForm/CharSearchForm';\r\n\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\nconst MainPage = () => {\r\n\r\n    const [selectedChar, setselectedChar] = useState(null)\r\n\r\n    const onCharSelected = (id) => {\r\n        setselectedChar(id)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta\r\n                    name=\"description\"\r\n                    content=\"Marvel information portal\"\r\n                />\r\n            <title>Marvel information portal</title>\r\n            </Helmet>\r\n            <ErrorBoundary>\r\n                <RandomChar/>\r\n            </ErrorBoundary>\r\n            <div className=\"char__content\">\r\n                <ErrorBoundary>\r\n                    <CharList onCharSelected={onCharSelected}/>\r\n                </ErrorBoundary>\r\n                <div>\r\n                    <ErrorBoundary>\r\n                        <CharInfo charId={selectedChar}/>\r\n                    </ErrorBoundary>\r\n                    <ErrorBoundary>\r\n                        <CharSearchForm/>\r\n                    </ErrorBoundary>\r\n                </div>\r\n            </div>\r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainPage;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import { useHttp } from '../hooks/http.hook'\r\n\r\nconst useMarvelService = () => {\r\n\r\n    const {loading, request, error, clearError} = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=d04fa5daa548e140a4c68e1b1b1a47f2';\r\n    const _baseOffset = 0;\r\n\r\n    //Метод по получение данных нескольких персонажей (в данном случае 9 limit=9 и отступом 250 персонажей от начала offset=250).Метод должен дождаться данных с севрера поэтому используем async и await\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);//Перебираем каждые элемент массива и преобразуем в удобный нам формат при помощи метода _transformeCharacter\r\n    }\r\n\r\n    // Вариант модификации готового метода для поиска по имени. \r\n    // Вызывать его можно вот так: getAllCharacters(null, name)\r\n\r\n    // const getAllCharacters = async (offset = _baseOffset, name = '') => {\r\n    //     const res = await request(`${_apiBase}characters?limit=9&offset=${offset}${name ? `&name=${name}` : '' }&${_apiKey}`);\r\n    //     return res.data.results.map(_transformCharacter);\r\n    // }\r\n\r\n    // Или можно создать отдельный метод для поиска по имени\r\n\r\n    const getCharacterByName = async (name) => {\r\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    //Метод по получению одного конкретного персонажа. Метод должен дождаться данных с севрера поэтому используем async и await\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);//res.data.results[0] - объект персонажа \r\n    }\r\n\r\n    //Метод получения данных нескольких комиксов\r\n    const getAllComics = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(__transformeComics);//Перебираем каждый элемент массива и преобразуем в удобный нам формат при помощи метода _transformeComics\r\n    }\r\n\r\n    //Метод получения данных одного комикса\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n        return __transformeComics(res.data.results[0])\r\n    }\r\n\r\n\r\n\r\n\r\n    //Метод трансформирующий данные по персонажу в удобный нам формат\r\n    const _transformCharacter = (char) => {\r\n        if (char.description === '') {\r\n            char.description = 'Описание отсутствует'\r\n        } else if (char.description.length > 210) {\r\n            char.description = char.description.substr(0, 210) + '...'\r\n        }\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description,\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    } \r\n\r\n    //Метод трансформирующий данные по комиксам в удобный формат\r\n    const __transformeComics = (comics) => {\r\n        return {\r\n            id: comics.id,\r\n            title: comics.title,\r\n            description: comics.description || 'Описание отсутствует',\r\n            pageCount: comics.pageCount ? `${comics.pageCount} pages` : 'Кол-во стр. не известно',\r\n            language: comics.textObjects.language,\r\n            prices: comics.prices[0].price ? `${comics.prices[0].price}$` : 'Цена неизвестна',\r\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n        }\r\n    } \r\n\r\n    return {loading, error, getAllCharacters, getCharacter, clearError, getAllComics, getComic, getCharacterByName}\r\n}\r\n\r\nexport default useMarvelService;","import { useState, useCallback } from 'react'\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false);//Изначально статус загрузки false\r\n    const [error, setError] = useState(null);\r\n\r\n    const request = useCallback(async(url, method = 'GET', body = null, headers = {'Content-Type': 'aplication/json'}) => {\r\n\r\n        setLoading(true);//Как запустили функцию request, значит идет загрузка и устанавливаем loading в true\r\n\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n\r\n            if(!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            setLoading(false);//после того как данные загрузились устанавливаем loading обратно в false\r\n\r\n            return data;\r\n            \r\n        } catch (e) {\r\n            setLoading(false);//если произошла ошибка, то присваимваем loading в false\r\n            setError(e.message);//если произошла ошибка, то присваиваем error сообщение ошибки\r\n            throw(e);\r\n        }\r\n\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => setError(null), []);\r\n\r\n    return {loading, request, error, clearError}\r\n}"],"names":["style","display","width","height","objectFit","margin","src","imgError","alt","View","char","name","description","thumbnail","homepage","wiki","imgStyle","className","href","useState","setChar","useEffect","updateChar","useMarvelService","loading","error","getCharacter","clearError","onCharLoaded","id","Math","floor","random","then","errorMessage","ErrorMessage","spinner","Spinner","content","onClick","mjolnir","CharList","props","charList","setCharList","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","newCharList","ended","length","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","spisok","arr","items","map","i","CSSTransition","timeout","classNames","tabIndex","ref","el","onCharSelected","onKeyPress","e","key","TransitionGroup","component","renderItems","disabled","protoTypes","PropTypes","comics","slice","index","resourceURI","charId","skeleton","Skeleton","ErrorBoundary","state","errorInfo","console","log","this","setState","children","Component","getCharacterByName","results","to","initialValues","charName","validationSchema","Yup","required","onSubmit","htmlFor","type","placeholder","selectedChar","setselectedChar","Helmet","decoration","setLoading","setError","request","useCallback","url","method","body","headers","fetch","response","ok","Error","status","json","data","message","useHttp","_apiBase","_apiKey","res","_transformCharacter","getAllComics","__transformeComics","getComic","substr","path","extension","urls","title","pageCount","language","textObjects","prices","price"],"sourceRoot":""}