{"version":3,"file":"static/js/49.b354b2c9.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/pages/SingleComicPage.js","components/skeleton/Skeleton.js","services/MarvelService.js","hooks/http.hook.js"],"sourcesContent":["import imgError from \"./error.gif\"\r\n\r\nconst ErrorMessage = () => {\r\n    return(\r\n        <img style={{ display: 'block', width: \"250px\", height: \"250px\",objectFit: 'contain', margin: \"0 auto\"}} src={imgError} alt=\"Error\" />\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import { useParams, Link } from 'react-router-dom';\r\nimport { useState, useEffect } from 'react';\r\nimport {Helmet} from \"react-helmet\";\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport Spinner from '../spinner/Spinner';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\nimport Skeleton from '../skeleton/Skeleton';\r\n\r\nimport './singleComicPage.scss';\r\n\r\nconst SingleComicPage = () => {\r\n\r\n    const {comicId} = useParams();\r\n    const [comic, setComic] = useState(null);\r\n\r\n     //Используем сервис MarvelService, чтобы получить данные с сервера\r\n     const {loading, error, getComic, clearError} = useMarvelService();\r\n\r\n     useEffect(() => {\r\n        updateComic();\r\n    },[comicId])\r\n\r\n    const updateComic = () => {\r\n        clearError();\r\n        getComic(comicId)\r\n        .then(onComicLoaded);\r\n    }\r\n\r\n    //Метод обновление данных state для универсальности использования\r\n    const onComicLoaded = (comic) => {\r\n        setComic(comic);\r\n    }\r\n\r\n    const errorMessage = error ? <ErrorMessage/> : null;//если error из state - true, то выводим сообщение или картинку об ошибке, в противном случае ничего не выводим\r\n    const spinner = loading ? <Spinner/> : null;//если loading из state - true, то выводим спиннер, в противном случае ничего не выводим\r\n    const content = !(loading || error || !comic) ? <View comic={comic}/> : null; //если loading из state - false и error из state - false и есть char из state, то есть все загрузилось и нет никаких ошибок, то выводим контент\r\n\r\n    return (\r\n        <>\r\n            {errorMessage}\r\n            {spinner}\r\n            {content}\r\n        </>\r\n    )\r\n}\r\n\r\nconst View = ({comic}) => {\r\n\r\n    const {title, description, pageCount, language, prices, thumbnail} = comic\r\n\r\n    return (\r\n        <div className=\"single-comic\">\r\n            <Helmet>\r\n                <meta\r\n                    name=\"description\"\r\n                    content={`${title} comics book`}\r\n                />\r\n                <title>{title}</title>\r\n            </Helmet>\r\n            <img src={thumbnail} alt={title} className=\"single-comic__img\"/>\r\n            <div className=\"single-comic__info\">\r\n                <h2 className=\"single-comic__name\">{title}</h2>\r\n                <p className=\"single-comic__descr\">{description}</p>\r\n                <p className=\"single-comic__descr\">{pageCount}</p>\r\n                <p className=\"single-comic__descr\">Language: {language}</p>\r\n                <div className=\"single-comic__price\">{prices}</div>\r\n            </div>\r\n            <Link to=\"/comics\" className=\"single-comic__back\">Back to all</Link>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SingleComicPage;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import { useHttp } from '../hooks/http.hook'\r\n\r\nconst useMarvelService = () => {\r\n\r\n    const {loading, request, error, clearError} = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=d04fa5daa548e140a4c68e1b1b1a47f2';\r\n    const _baseOffset = 0;\r\n\r\n    //Метод по получение данных нескольких персонажей (в данном случае 9 limit=9 и отступом 250 персонажей от начала offset=250).Метод должен дождаться данных с севрера поэтому используем async и await\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);//Перебираем каждые элемент массива и преобразуем в удобный нам формат при помощи метода _transformeCharacter\r\n    }\r\n\r\n    // Вариант модификации готового метода для поиска по имени. \r\n    // Вызывать его можно вот так: getAllCharacters(null, name)\r\n\r\n    // const getAllCharacters = async (offset = _baseOffset, name = '') => {\r\n    //     const res = await request(`${_apiBase}characters?limit=9&offset=${offset}${name ? `&name=${name}` : '' }&${_apiKey}`);\r\n    //     return res.data.results.map(_transformCharacter);\r\n    // }\r\n\r\n    // Или можно создать отдельный метод для поиска по имени\r\n\r\n    const getCharacterByName = async (name) => {\r\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    //Метод по получению одного конкретного персонажа. Метод должен дождаться данных с севрера поэтому используем async и await\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);//res.data.results[0] - объект персонажа \r\n    }\r\n\r\n    //Метод получения данных нескольких комиксов\r\n    const getAllComics = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(__transformeComics);//Перебираем каждый элемент массива и преобразуем в удобный нам формат при помощи метода _transformeComics\r\n    }\r\n\r\n    //Метод получения данных одного комикса\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n        return __transformeComics(res.data.results[0])\r\n    }\r\n\r\n\r\n\r\n\r\n    //Метод трансформирующий данные по персонажу в удобный нам формат\r\n    const _transformCharacter = (char) => {\r\n        if (char.description === '') {\r\n            char.description = 'Описание отсутствует'\r\n        } else if (char.description.length > 210) {\r\n            char.description = char.description.substr(0, 210) + '...'\r\n        }\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description,\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    } \r\n\r\n    //Метод трансформирующий данные по комиксам в удобный формат\r\n    const __transformeComics = (comics) => {\r\n        return {\r\n            id: comics.id,\r\n            title: comics.title,\r\n            description: comics.description || 'Описание отсутствует',\r\n            pageCount: comics.pageCount ? `${comics.pageCount} pages` : 'Кол-во стр. не известно',\r\n            language: comics.textObjects.language,\r\n            prices: comics.prices[0].price ? `${comics.prices[0].price}$` : 'Цена неизвестна',\r\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n        }\r\n    } \r\n\r\n    return {loading, error, getAllCharacters, getCharacter, clearError, getAllComics, getComic, getCharacterByName}\r\n}\r\n\r\nexport default useMarvelService;","import { useState, useCallback } from 'react'\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false);//Изначально статус загрузки false\r\n    const [error, setError] = useState(null);\r\n\r\n    const request = useCallback(async(url, method = 'GET', body = null, headers = {'Content-Type': 'aplication/json'}) => {\r\n\r\n        setLoading(true);//Как запустили функцию request, значит идет загрузка и устанавливаем loading в true\r\n\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n\r\n            if(!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            setLoading(false);//после того как данные загрузились устанавливаем loading обратно в false\r\n\r\n            return data;\r\n            \r\n        } catch (e) {\r\n            setLoading(false);//если произошла ошибка, то присваимваем loading в false\r\n            setError(e.message);//если произошла ошибка, то присваиваем error сообщение ошибки\r\n            throw(e);\r\n        }\r\n\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => setError(null), []);\r\n\r\n    return {loading, request, error, clearError}\r\n}"],"names":["style","display","width","height","objectFit","margin","src","imgError","alt","View","comic","title","description","pageCount","language","prices","thumbnail","className","name","content","to","comicId","useParams","useState","setComic","useMarvelService","loading","error","getComic","clearError","useEffect","updateComic","then","onComicLoaded","errorMessage","spinner","setLoading","setError","request","useCallback","url","method","body","headers","fetch","response","ok","Error","status","json","data","message","useHttp","_apiBase","_apiKey","getAllCharacters","offset","res","results","map","_transformCharacter","getCharacterByName","getCharacter","id","getAllComics","__transformeComics","char","length","substr","path","extension","homepage","urls","wiki","comics","items","textObjects","price"],"sourceRoot":""}